#include<stdio.h>
#include<string.h>

char input[100];
int i = 0; // Initialize i here
int l;

int E(); // Function declarations
int EP();
int T();
int TP();
int F();

int main() // Changed void to int
{
    printf("\nRecursive descent parsing for the following grammar\n");
    printf("\nE->TE'\nE'->+TE'/@\nT->FT'\nT'->*FT'/@\nF->(E)/ID\n");
    printf("\nEnter the string to be checked:");
    gets(input);

    l = strlen(input); // Calculate length of input string

    if(E() && i == l) // Check if parsing successful and if we have reached end of input
    {
        printf("\nString is accepted");
    }
    else
    {
        printf("\nString is not accepted");
    }

    return 0; // Return 0 to indicate successful execution
}

int E()
{
    if(T())
    {
        if(EP())
            return 1;
        else
            return 0;
    }
    else
        return 0;
}

int EP()
{
    if(i < l && input[i] == '+')
    {
        i++;
        if(T())
        {
            if(EP())
                return 1;
            else
                return 0;
        }
        else
            return 0;
    }
    else
        return 1;
}

int T()
{
    if(F())
    {
        if(TP())
            return 1;
        else
            return 0;
    }
    else
        return 0;
}

int TP()
{
    if(i < l && input[i] == '*')
    {
        i++;
        if(F())
        {
            if(TP())
                return 1;
            else
                return 0;
        }
        else
            return 0;
    }
    else
        return 1;
}

int F()
{
    if(i < l && input[i] == '(')
    {
        i++;
        if(E())
        {
            if(i < l && input[i] == ')')
            {
                i++;
                return 1;
            }
            else
                return 0;
        }
        else
            return 0;
    }
    else if(i < l && ((input[i] >= 'a' && input[i] <= 'z') || (input[i] >= 'A' && input[i] <= 'Z')))
    {
        i++;
        return 1;
    }
    else
        return 0;
}
